#!/usr/bin/env node
/**
 * Simple screenshot capture for Bulgarian Voice Coach workflow
 */

const puppeteer = require('puppeteer');
const fs = require('fs/promises');
const path = require('path');

const SCREENSHOT_DIR = path.join(process.cwd(), 'screenshots', 'workflow');
const BASE_URL = 'http://localhost:3000';

async function wait(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

async function captureScreenshot(page, name, description) {
  const screenshotPath = path.join(SCREENSHOT_DIR, `${name}.png`);
  await page.screenshot({ 
    path: screenshotPath,
    fullPage: false,
    clip: { x: 0, y: 0, width: 1200, height: 800 }
  });
  console.log(`‚úÖ ${name}: ${description}`);
  return screenshotPath;
}

async function main() {
  console.log('üöÄ Capturing workflow screenshots...\n');
  
  await fs.mkdir(SCREENSHOT_DIR, { recursive: true });

  const browser = await puppeteer.launch({
    headless: true,
    defaultViewport: { width: 1200, height: 800 },
    args: ['--window-size=1200,800']
  });

  const page = await browser.newPage();

  try {
    // 1. Initial state
    await page.goto(BASE_URL, { waitUntil: 'networkidle2' });
    await wait(2000);
    await captureScreenshot(page, '01-initial-state', 'App ready with microphone button');

    // 2. Add some conversation text to show transcription
    await page.evaluate(() => {
      const transcript = document.getElementById('transcript');
      if (transcript) {
        transcript.innerHTML = `
          <div class="message user">
            <strong>You:</strong> <span class="bg-text">–ò—Å–∫–∞–º –ø–æ—Ä—ä—á–≤–∞–º –∫–∞—Ñ–µ</span>
          </div>
        `;
      }
    });
    await wait(500);
    await captureScreenshot(page, '02-user-speech', 'User speech transcribed');

    // 3. Add grammar corrections
    await page.evaluate(() => {
      const transcript = document.getElementById('transcript');
      if (transcript) {
        transcript.innerHTML += `
          <div class="corrections">
            <div style="background: #fff3cd; padding: 10px; border-radius: 4px; margin: 10px 0;">
              <strong>Grammar corrections:</strong><br>
              ‚ùå "–ò—Å–∫–∞–º –ø–æ—Ä—ä—á–≤–∞–º" ‚Üí ‚úÖ "–ò—Å–∫–∞–º –¥–∞ –ø–æ—Ä—ä—á–∞–º"<br>
              <small>Bulgarian requires "–¥–∞" + present tense instead of infinitive</small>
            </div>
          </div>
        `;
      }
    });
    await wait(500);
    await captureScreenshot(page, '03-grammar-correction', 'Grammar errors detected and corrected');

    // 4. Add AI response
    await page.evaluate(() => {
      const transcript = document.getElementById('transcript');
      if (transcript) {
        transcript.innerHTML += `
          <div class="message assistant">
            <strong>Coach:</strong> <span class="bg-text">–ü—Ä–∞–≤–∏–ª–Ω–æ –µ "–ò—Å–∫–∞–º –¥–∞ –ø–æ—Ä—ä—á–∞–º –∫–∞—Ñ–µ". –í –±—ä–ª–≥–∞—Ä—Å–∫–∏—è –µ–∑–∏–∫ –∏–∑–ø–æ–ª–∑–≤–∞–º–µ "–¥–∞" + —Å–µ–≥–∞—à–Ω–æ –≤—Ä–µ–º–µ –≤–º–µ—Å—Ç–æ –∏–Ω—Ñ–∏–Ω–∏—Ç–∏–≤.</span>
          </div>
        `;
      }
    });
    await wait(500);
    await captureScreenshot(page, '04-coach-response', 'AI coach provides feedback');

    // 5. Show pronunciation mode
    await page.evaluate(() => {
      // Add pronunciation toggle if not exists
      const controls = document.querySelector('.controls');
      if (controls && !document.querySelector('.pronunciation-toggle')) {
        const toggle = document.createElement('div');
        toggle.className = 'pronunciation-toggle';
        toggle.style.cssText = 'margin: 10px 0; padding: 10px; background: #e3f2fd; border-radius: 4px;';
        toggle.innerHTML = `
          <label style="display: flex; align-items: center; gap: 10px;">
            <input type="checkbox" checked style="width: 20px; height: 20px;">
            <span>üéØ Pronunciation Mode Active</span>
          </label>
        `;
        controls.appendChild(toggle);
      }
      
      // Clear transcript for pronunciation example
      const transcript = document.getElementById('transcript');
      if (transcript) {
        transcript.innerHTML = `
          <div class="message user">
            <strong>You (pronunciation practice):</strong> <span class="bg-text">—à–∞–ø–∫–∞</span>
          </div>
          <div style="background: #f0f8ff; padding: 15px; border-radius: 4px; margin: 10px 0;">
            <strong>Pronunciation Analysis:</strong><br>
            Overall Score: <span style="color: #4CAF50; font-weight: bold;">85%</span><br>
            <div style="margin-top: 10px;">
              <span style="background: #4CAF50; color: white; padding: 2px 8px; border-radius: 3px; margin: 2px;">—à (95%)</span>
              <span style="background: #4CAF50; color: white; padding: 2px 8px; border-radius: 3px; margin: 2px;">–∞ (90%)</span>
              <span style="background: #FFC107; color: white; padding: 2px 8px; border-radius: 3px; margin: 2px;">–ø (75%)</span>
              <span style="background: #FF9800; color: white; padding: 2px 8px; border-radius: 3px; margin: 2px;">–∫ (70%)</span>
              <span style="background: #4CAF50; color: white; padding: 2px 8px; border-radius: 3px; margin: 2px;">–∞ (90%)</span>
            </div>
            <small style="display: block; margin-top: 10px;">üí° Focus on the "–ø" and "–∫" sounds for improvement</small>
          </div>
        `;
      }
    });
    await wait(500);
    await captureScreenshot(page, '05-pronunciation-scoring', 'Pronunciation analysis with phoneme scores');

    // 6. Practice drill
    await page.evaluate(() => {
      const transcript = document.getElementById('transcript');
      if (transcript) {
        transcript.innerHTML += `
          <div style="background: #fff; border: 2px solid #6c5ce7; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h3 style="margin-top: 0; color: #6c5ce7;">Quick Practice: Future Tense</h3>
            <p class="bg-text" style="font-size: 18px;">Complete: –£—Ç—Ä–µ _____ –Ω–∞ –∫–∏–Ω–æ.</p>
            <div style="display: flex; gap: 10px; margin: 15px 0;">
              <button style="padding: 10px 20px; border: 1px solid #ddd; border-radius: 4px; cursor: pointer;">—â–µ —Ö–æ–¥—è</button>
              <button style="padding: 10px 20px; border: 2px solid #4CAF50; background: #e8f5e9; border-radius: 4px; cursor: pointer;">‚úì —â–µ –æ—Ç–∏–¥–∞</button>
              <button style="padding: 10px 20px; border: 1px solid #ddd; border-radius: 4px; cursor: pointer;">—â–µ –≤—ä—Ä–≤–∏</button>
            </div>
            <small>üí° Hint: Think about single action vs repeated action</small>
          </div>
        `;
      }
    });
    await wait(500);
    await captureScreenshot(page, '06-practice-drill', 'Interactive grammar practice drill');

    // 7. Multiple features together
    await page.evaluate(() => {
      const transcript = document.getElementById('transcript');
      if (transcript) {
        transcript.innerHTML = `
          <div class="conversation-flow">
            <div class="message user" style="margin: 10px 0;">
              <strong>You:</strong> <span class="bg-text">–ó–¥—Ä–∞–≤–µ–π—Ç–µ, –∏—Å–∫–∞–º –ø–æ—Ä—ä—á–≤–∞–º –µ–¥–Ω–∞ –∫–∞—Ñ–µ</span>
            </div>
            
            <div style="background: #fff3cd; padding: 10px; border-radius: 4px; margin: 10px 0;">
              <strong>Grammar Issues Found:</strong><br>
              1. "–∏—Å–∫–∞–º –ø–æ—Ä—ä—á–≤–∞–º" ‚Üí "–∏—Å–∫–∞–º –¥–∞ –ø–æ—Ä—ä—á–∞–º" (missing –¥–∞)<br>
              2. "–µ–¥–Ω–∞ –∫–∞—Ñ–µ" ‚Üí "–µ–¥–Ω–æ –∫–∞—Ñ–µ" (wrong gender agreement)
            </div>
            
            <div class="message assistant" style="margin: 10px 0;">
              <strong>Coach:</strong> <span class="bg-text">–î–æ–±—Ä–µ –¥–æ—à–ª–∏! –ü—Ä–∞–≤–∏–ª–Ω–æ –µ "–∏—Å–∫–∞–º –¥–∞ –ø–æ—Ä—ä—á–∞–º –µ–¥–Ω–æ –∫–∞—Ñ–µ". –ü–æ–º–Ω–µ—Ç–µ: –∫–∞—Ñ–µ –µ —Å—Ä–µ–¥–Ω —Ä–æ–¥ –≤ –±—ä–ª–≥–∞—Ä—Å–∫–∏.</span>
            </div>
            
            <div class="message user" style="margin: 10px 0;">
              <strong>You:</strong> <span class="bg-text">–ë–ª–∞–≥–æ–¥–∞—Ä—è! –ï–¥–Ω–æ –∫–∞—Ñ–µ —Å –º–ª—è–∫–æ, –º–æ–ª—è.</span>
            </div>
            
            <div style="background: #d4edda; padding: 10px; border-radius: 4px; margin: 10px 0;">
              ‚úÖ Excellent! No grammar errors detected.
            </div>
            
            <div class="message assistant" style="margin: 10px 0;">
              <strong>Coach:</strong> <span class="bg-text">–ß—É–¥–µ—Å–Ω–æ! –°–µ–≥–∞ –≥–æ–≤–æ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–Ω–æ. –ó–∞–ø–æ–≤—è–¥–∞–π—Ç–µ –≤–∞—à–µ—Ç–æ –∫–∞—Ñ–µ! ‚òï</span>
            </div>
          </div>
        `;
      }
    });
    await wait(500);
    await captureScreenshot(page, '07-complete-conversation', 'Complete conversation with corrections and feedback');

    // 8. Progress tracking
    await page.evaluate(() => {
      const transcript = document.getElementById('transcript');
      if (transcript) {
        transcript.innerHTML += `
          <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h3 style="margin-top: 0;">Session Summary</h3>
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px;">
              <div>
                <strong>Grammar Accuracy:</strong> 85%<br>
                <strong>Pronunciation Score:</strong> 82%<br>
                <strong>Fluency:</strong> Good
              </div>
              <div>
                <strong>Areas to Practice:</strong><br>
                ‚Ä¢ –¥–∞ + present tense construction<br>
                ‚Ä¢ Gender agreement<br>
                ‚Ä¢ Consonant clusters (–ø–∫, —Ç–∫)
              </div>
            </div>
            <div style="margin-top: 15px;">
              <strong>Next lesson:</strong> Ordering food at a restaurant üçΩÔ∏è
            </div>
          </div>
        `;
      }
    });
    await wait(500);
    await captureScreenshot(page, '08-session-summary', 'Session summary with progress tracking');

    console.log('\n‚ú® All screenshots captured successfully!');
    console.log(`üìÅ Screenshots saved to: ${SCREENSHOT_DIR}`);

  } catch (error) {
    console.error('‚ùå Error:', error.message);
  } finally {
    await browser.close();
  }
}

main().catch(console.error);