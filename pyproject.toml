[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "bulgarian-voice-coach"
version = "0.1.0"
description = "Voice-enabled web app for teaching Bulgarian to Slavic speakers"
readme = "README.md"
requires-python = ">=3.11"

# Core dependencies - minimal set for basic functionality
dependencies = [
  "fastapi>=0.110.0",
  "uvicorn[standard]>=0.27.0",
  "websockets>=12.0",
  "numpy>=1.24.0",
  "ctranslate2>=4.0.0",
  "faster-whisper>=1.0.0",
  "webrtcvad-wheels>=2.0.0",
  "pydantic>=2.5.0",
  "python-dotenv>=1.0.0",
  "openai>=1.101.0",
  "anthropic>=0.64.0",
]

[project.optional-dependencies]
# Development dependencies
dev = [
  "ruff>=0.1.0",
  "pytest>=8.0.0",
  "pytest-asyncio>=0.23.0",
  "pytest-cov>=4.0.0",
  "httpx>=0.27.0",
]

# Pronunciation scoring feature - adds ~2GB to image
pronunciation = [
  "whisperx>=3.1.0",
  "torch>=2.0.0",
  "torchaudio>=2.0.0",
  "transformers>=4.30.0",
]

# OpenTelemetry instrumentation - adds ~100MB to image
telemetry = [
  "opentelemetry-api>=1.20.0",
  "opentelemetry-sdk>=1.20.0",
  "opentelemetry-exporter-otlp>=1.20.0",
  "opentelemetry-instrumentation-fastapi>=0.41b0",
  "opentelemetry-instrumentation-httpx>=0.41b0",
  "opentelemetry-instrumentation-logging>=0.41b0",
]

# Full feature set - includes all optional dependencies
full = [
  "bulgarian-voice-coach[pronunciation,telemetry]",
]

[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
select = [
  "E",  # pycodestyle errors
  "W",  # pycodestyle warnings
  "F",  # pyflakes
  "I",  # isort
  "C",  # flake8-comprehensions
  "B",  # flake8-bugbear
  "UP", # pyupgrade
]
ignore = [
  "E501", # line too long, handled by ruff format
  "C901", # too complex, subjective
]

[tool.pytest.ini_options]
testpaths = ["server"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short"
asyncio_mode = "auto"
pythonpath = ["server"]

[dependency-groups]
dev = [
  "httpx>=0.28.1",
  "pytest>=8.4.1",
  "pytest-asyncio>=1.1.0",
  "pytest-cov>=4.0.0",
]

[tool.pyright]
pythonVersion = "3.11"
venvPath = "."
venv = ".venv"
include = ["server"]
exclude = ["client", "docs"]
typeCheckingMode = "standard"
reportMissingImports = true
reportMissingTypeStubs = false
stubPath = ""
pythonPath = ".venv/bin/python"

[tool.ty.environment]
# venv at project root (".venv") and Python 3.11
python = "./.venv"
python-version = "3.11"
# treat "server/" as the first-party source root
root = ["./server"]
# like Pyright's "extraPaths": additional import roots
extra-paths = [".", "server"]

[tool.ty.src]
# only check code under "server/"
include = ["server"]
# ignore these directories
exclude = ["client", "docs"]

[tool.setuptools.packages.find]
where = ["."]
include = ["server*"]
exclude = ["client*", "docs*", "screenshots*", "scripts*", "content*", "data*"]
